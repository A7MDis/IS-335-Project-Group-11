(1)-So we choose a MariaDB because we used it b4 in 230IS
---------------------------------------------------------------------------------------------------------
(2)-For the ride-sharing app, selecting the right database is critical for ensuring **scalability, reliability, and efficiency** in handling real-time data such as user profiles, ride requests, driver locations, and transactions. After evaluating multiple options, **MariaDB** was chosen as the primary database due to its powerful relational database management system (RDBMS) capabilities, performance, and open-source nature.

2. Why MariaDB?
MariaDB was selected over other database systems (such as PostgreSQL, MySQL, or MongoDB) because it offers a **balance of performance, scalability, and flexibility** that fits well with the core requirements of the ride-sharing app.

2.1 Relational Data Integrity
- A ride-sharing app requires **structured and relational data**, including **users, drivers, vehicles, ride requests, payments, and locations**.
- **MariaDB supports ACID transactions**, ensuring consistency in ride bookings, payments, and driver-rider interactions.
- It provides **strong referential integrity** using **FOREIGN KEYS**, which is crucial for maintaining relationships between entities like **riders, drivers, and vehicles**.

2.2 Performance and Scalability
- **MariaDB supports partitioning and replication**, allowing it to scale efficiently as the user base grows.
- It has **thread pooling**, which improves connection management and query execution for high-traffic applications like ride-sharing platforms.
- Offers **column-store indexing**, enabling faster analytical queries for ride history, surge pricing, and business intelligence reports.

2.3 Geographic Data Support
- Although MariaDB does not have a built-in GIS extension like **PostGIS in PostgreSQL**, it **supports spatial data types and indexing** using **GEOMETRY and POINT types**.
- This allows efficient storage and querying of **driver locations, pickup/drop-off points, and route optimizations**.

2.4 Real-Time Data Handling
- A ride-sharing app requires **low-latency queries** to match riders with nearby drivers.
- **MariaDB’s InnoDB storage engine** provides fast **read and write operations**, ensuring real-time ride matching and updates.
- Supports **caching mechanisms like Query Cache**, which enhances performance when fetching frequently requested data, such as driver availability.

2.5 Open Source and Community Support
- **MariaDB is open-source** and **MySQL-compatible**, making it cost-effective while still benefiting from MySQL’s ecosystem.
- It has a **strong developer community and commercial support**, ensuring long-term viability for enterprise-level applications.

---

2.6Comparison with Other Databases
| **Feature**           | **MariaDB** | **PostgreSQL** | **MySQL** | **MongoDB** |
|----------------------|------------|---------------|-----------|-------------|
| **ACID Compliance**  | ✅ Yes | ✅ Yes | ✅ Yes | ❌ No (by default) |
| **Foreign Keys**     | ✅ Yes | ✅ Yes | ✅ Yes | ❌ No |
| **Geospatial Support** | ✅ Basic (SPATIAL Indexing) | ✅ Advanced (PostGIS) | ❌ No | ✅ Yes (GeoJSON) |
| **Scalability**      | ✅ Good | ✅ Good | ✅ Good | ✅ Excellent |
| **Read Performance** | ✅ Fast (Thread Pooling) | ✅ Good | ✅ Fast | ✅ Very Fast (NoSQL) |
| **Write Performance** | ✅ Fast | ✅ Good | ✅ Fast | ✅ Very Fast |
| **Replication & Clustering** | ✅ Yes | ✅ Yes | ✅ Yes | ✅ Yes |
| **Real-Time Querying** | ✅ Optimized | ✅ Optimized | ✅ Optimized | ❌ Slower Joins |

📌 **Key Takeaways:**
- **MariaDB vs PostgreSQL**: While PostgreSQL has more advanced GIS support, MariaDB offers **better performance with replication and faster writes**.
- **MariaDB vs MySQL**: MariaDB is an **improved version of MySQL**, offering better performance and scalability.
- **MariaDB vs MongoDB**: MariaDB is more suitable **for structured ride-sharing data**, while MongoDB is better for **unstructured, high-volume document storage**.

---

2.7References & Supporting Articles
Technical Papers & Benchmarks
- Comparing SQL Databases for High-Traffic Applications 
  *https://db-engines.com/en/ranking*
  - Demonstrates MariaDB’s strong position among relational databases.

- MariaDB Performance Compared to MySQL and PostgreSQL 
  *https://mariadb.com/kb/en/mariadb-vs-mysql-vs-postgresql-performance-comparison/*
  - Shows MariaDB's **faster reads and write performance** in high-load environments.

- MariaDB vs PostgreSQL for Scalable Applications  
  *https://severalnines.com/database-blog/mariadb-vs-postgresql-choosing-right-open-source-database*
  - Discusses **performance trade-offs** between MariaDB and PostgreSQL.

- Spatial Data Indexing in MariaDB for Location-Based Services  
  *https://mariadb.com/kb/en/spatial-indexes/*
  - Demonstrates how MariaDB **handles geospatial queries efficiently.
  --------------------------------------------------------------------------------------------------------
(3)-CREATE TABLE Riders (
    rider_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE Drivers (
    driver_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    license_number VARCHAR(50) UNIQUE NOT NULL,
    status ENUM('available', 'busy', 'offline') DEFAULT 'offline',
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
CREATE TABLE Vehicles (
    vehicle_id INT AUTO_INCREMENT PRIMARY KEY,
    driver_id INT NOT NULL,
    make VARCHAR(50),
    model VARCHAR(50),
    color VARCHAR(30),
    plate_number VARCHAR(20) UNIQUE NOT NULL,
    FOREIGN KEY (driver_id) REFERENCES Drivers(driver_id) ON DELETE CASCADE
);
CREATE TABLE RideRequests (
    ride_id INT AUTO_INCREMENT PRIMARY KEY,
    rider_id INT NOT NULL,
    driver_id INT DEFAULT NULL,
    pickup_lat DECIMAL(9,6),
    pickup_lng DECIMAL(9,6),
    dropoff_lat DECIMAL(9,6),
    dropoff_lng DECIMAL(9,6),
    category_name VARCHAR(20),
    price_multiplier DECIMAL(4,2),
    surge_multiplier DECIMAL(4,2),
    estimated_duration INT,
    estimated_arrival_time INT,
    base_fare DECIMAL(10,2),
    total_fare DECIMAL(10,2),
    status ENUM('requested', 'ongoing', 'completed', 'cancelled') NOT NULL DEFAULT 'requested',
    route_taken TEXT,
    start_time TIMESTAMP NULL,
    end_time TIMESTAMP NULL,
    distance_traveled DECIMAL(15,2),
    ride_duration INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (rider_id) REFERENCES Riders(rider_id) ON DELETE CASCADE,
    FOREIGN KEY (driver_id) REFERENCES Drivers(driver_id) ON DELETE SET NULL
);
CREATE TABLE RideOffers (
    offer_id INT AUTO_INCREMENT PRIMARY KEY,
    ride_id INT NOT NULL,
    driver_id INT NOT NULL,
    offer_status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ride_id) REFERENCES RideRequests(ride_id) ON DELETE CASCADE,
    FOREIGN KEY (driver_id) REFERENCES Drivers(driver_id) ON DELETE CASCADE
);
and this the (connection string) ->mysql://ride_user:securepassword@localhost:3306/ride_sharing
----------------------------------------------------------------------------------------------------------------------------------------
(4)- import mysql.connector
from faker import Faker
import random

# Create a Faker instance for generating random data
fake = Faker()

# Connect to the MariaDB database
conn = mysql.connector.connect(
    host="localhost",
    user="ride_user",  # Ensure the correct username
    password="securepassword",  # Ensure the correct password
    database="ride_sharing"
)
cur = conn.cursor()

# Number of test records
num_drivers = 50
num_vehicles = 50

# Insert Driver Data (Drivers)
print("Inserting drivers...")
driver_ids = []
for _ in range(num_drivers):
    cur.execute(
        "INSERT INTO Drivers (name, phone_number, email, license_number, status, latitude, longitude) VALUES (%s, %s, %s, %s, %s, %s, %s)",
        (fake.name(), fake.phone_number(), fake.unique.email(), fake.license_plate(),
         random.choice(['available', 'busy', 'offline']), fake.latitude(), fake.longitude())
    )
    driver_ids.append(cur.lastrowid)  # Store the inserted driver_id

# Commit to save driver data in the database
conn.commit()
print(f"{len(driver_ids)} drivers inserted successfully!")

# Insert Vehicle Data (Vehicles)
print("Inserting vehicles...")
if driver_ids:  # Ensure drivers exist before inserting vehicles
    for _ in range(num_vehicles):
        driver_id = random.choice(driver_ids)  # Randomly assign an existing driver
        cur.execute(
            "INSERT INTO Vehicles (driver_id, make, model, color, plate_number) VALUES (%s, %s, %s, %s, %s)",
            (driver_id, random.choice(['Toyota', 'Honda', 'Ford', 'BMW', 'Tesla']),
             random.choice(['Corolla', 'Civic', 'Mustang', 'X5', 'Model S']),
             fake.color_name(), fake.license_plate())
        )
    print(f"{num_vehicles} vehicles inserted successfully!")
else:
    print("No drivers found in the database, skipping vehicle insertion!")

# Commit to save vehicle data in the database
conn.commit()

# Close the database connection
cur.close()
conn.close()

print("Test data inserted successfully!")
